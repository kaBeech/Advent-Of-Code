package ExplorerTest api;

class Game {
  var number: i32;
  // Hardcode gameStringLength into gameChars declation because I'm having  
  // difficulty getting Carbon to recognize the integer 
  var gameChars: [String; 200];
  var currentGameCharIndex: i32;
  var isPossible: bool;
  var colonFound: bool;
}

class ParsedNumber {
  var value: i32;
  var newCurrentGameCharIndex: i32;
}

fn FindColon(game: Game) -> bool {
  var colonFound: bool = false;

  if (game.gameChars[game.currentGameCharIndex] == ":") {
    colonFound = true;
  }

  return colonFound;
}

fn ParseNumberInGameChars(game: Game) -> ParsedNumber {
   var parsedNumber: ParsedNumber = {
    .value = 0,
    .newCurrentGameCharIndex = game.currentGameCharIndex,
  };

  match (game.gameChars[game.currentGameCharIndex]) {
    case "1" => {
      parsedNumber.value = 1;
    }

    default => {
      // Do nothing
    }
  }
 
  return parsedNumber;
}

fn Main() -> i32 {
  let gameStringLength: i32 = 200;
  // Hardcode gameStringLength into rawGames declation because I'm having  
  // difficulty getting Carbon to recognize the integer
  let rawGames: [[String; 200]; 2] = (("G", "a", "m", "e", " ", "1", ":", " ", "3", " ", "b", "l", "u", "e", ",", " ", "4", " ", "r", "e", "d", ";", " ", "1", " ", "r", "e", "d", ",", " ", "2", " ", "g", "r", "e", "e", "n", ",", " ", "6", " ", "b", "l", "u", "e", ";", " ", "2", " ", "g", "r", "e", "e", "n", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"), ("G", "a", "m", "e", " ", "2", ":", " ", "6", " ", "r", "e", "d", ",", " ", "1", " ", "b", "l", "u", "e", ",", " ", "3", " ", "g", "r", "e", "e", "n", ";", " ", "2", " ", "b", "l", "u", "e", ",", " ", "1", " ", "r", "e", "d", ",", " ", "2", " ", "g", "r", "e", "e", "n", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"));
  var currentGameIndex: i32 = 0;
  let numberOfGames: i32 = 2;
  var possibleGamesSum: i32 = 0;

  while (currentGameIndex < numberOfGames) {
    var game: Game = { 
      .number = currentGameIndex + 1,
      .gameChars = rawGames[currentGameIndex],
      .currentGameCharIndex = 0,
      .isPossible = true,
      .colonFound = false,
      };

      while (game.currentGameCharIndex < gameStringLength) {
        if (game.colonFound == false) {
          game.colonFound = FindColon(game);
        } else if (game.isPossible) {
            Print(game.gameChars[game.currentGameCharIndex]);
        }
        game.currentGameCharIndex = game.currentGameCharIndex + 1;

      }

    currentGameIndex = currentGameIndex + 1;
  }

  Print("Printing {0}", 1);
  return 0;
}